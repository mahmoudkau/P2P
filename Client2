using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using UnityEngine;

public class Client2 : MonoBehaviour
{

    public string clientName;
    public bool isHost;
    private bool socketReady;
    private TcpClient socket;
    public NetworkStream stream;
    public StreamWriter writer;
    public StreamReader reader;

    private List<GameClient2> players = new List<GameClient2>();

    private void Start()
    {
        DontDestroyOnLoad(gameObject);

    }
    public bool ConnectToServer(string host, int port)
    {
        if (socketReady)
            return false;

        try
        {
            socket = new TcpClient(host, port);
            stream = socket.GetStream();
            writer = new StreamWriter(stream);
            reader = new StreamReader(stream);

            socketReady = true;
        }
        catch (Exception e)
        {
            Debug.Log("Socket error: " + e.Message);
        }

        return socketReady;
    }

    private void Update()
    {
        if (socketReady)
        {
            if (stream.DataAvailable)
            {
                string data = reader.ReadLine();
                if (data != null)
                {
                    OnIncomingData(data);
                }
            }
        }

    }

    //Send msgs to server
    public void Send(string data)
    {
        if (!socketReady)
            return;

        writer.WriteLine(data);
        writer.Flush();
    }

    //Read msgs from server
    private void OnIncomingData(string data)
    {

        Debug.Log("Client: " + data);
        string[] aData = data.Split('|');

        switch (aData[0])
        {

            case "SWHO":
                for (int i = 1; i < aData.Length - 1; i++)
                {

                    UserConnected(aData[i], false);
                }
                Send("CWHO|" + clientName + "|" + ((isHost) ? 1 : 0).ToString());
                break;

            case "SCNN":
                UserConnected(aData[1], false);
                break;

            case "SLCT":
                if (isHost != bool.Parse(aData[3]))
                {
                    BoardController.Instance.selectChessPiece(int.Parse(aData[1]), int.Parse(aData[2]));
                }
                break;

            case "MOVE":
                if (isHost!=bool.Parse(aData[3])) { 
                    BoardController.Instance.moveChessPiece(int.Parse(aData[1]), int.Parse(aData[2]));
                    BoardController.Instance.changeTurn();
                }
                break;
        }
    }


    private void UserConnected(string name, bool host)
    {
        GameClient2 c = new GameClient2();
        c.name = name;

        players.Add(c);

        if (players.Count == 2)
        {
            GameManager.Instance.StartGame();
        }



    }
    private void OnApplicationQuit()
    {
        CloseSocket();

    }
    private void OnDisable()
    {
        CloseSocket();
    }
    private void CloseSocket()
    {
        if (!socketReady)
            return;

        writer.Close();
        reader.Close();
        socket.Close();
        socketReady = false;
    }

}



public class GameClient2
{
    public string name;
    public bool isHost;
}
